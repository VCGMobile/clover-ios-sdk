/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
 
import ObjectMapper

extension CLVModels {

public class Employees {
 
public enum AccountRole: String {
  case ADMIN
  case MANAGER
  case EMPLOYEE
}

 
open class Employee: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// Full name of the employee
    open var name: String?
    /// Nickname of the employee (shows up on receipts)
    open var nickname: String?
    /// Custom ID of the employee
    open var customId: String?
    /// Email of the employee (optional)
    open var email: String?
    /// Returns true if this employee was sent an invite to activate their account
    open var inviteSent: Bool?
    /// Timestamp of when this employee claimed their account
    open var claimedTime: Date?
    /// Timestamp of when this employee was deleted
    open var deletedTime: Date?
    /// Employee PIN (hashed)
    open var pin: String?
    /// Employee PIN
    open var unhashedPin: String?
    /// Employee System Role
    open var role: CLVModels.Employees.AccountRole?
    open var roles: [CLVModels.Employees.Role]?
    /// Returns true if this employee is the owner account for this merchant
    open var isOwner: Bool?
    /// This employee's shifts
    open var shifts: [CLVModels.Employees.Shift]?
    /// This employee's payments
    open var payments: [CLVModels.Payments.Payment]?
    /// This employee's orders
    open var orders: [CLVModels.Order.Order]?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(nickname, forKey: "nickname")
  aCoder.encode(customId, forKey: "customId")
  aCoder.encode(email, forKey: "email")
  aCoder.encode(inviteSent, forKey: "inviteSent")
  aCoder.encode(claimedTime, forKey: "claimedTime")
  aCoder.encode(deletedTime, forKey: "deletedTime")
  aCoder.encode(pin, forKey: "pin")
  aCoder.encode(unhashedPin, forKey: "unhashedPin")
  aCoder.encode(role?.rawValue, forKey: "role")
  aCoder.encode(roles, forKey: "roles")
  aCoder.encode(isOwner, forKey: "isOwner")
  aCoder.encode(shifts, forKey: "shifts")
  aCoder.encode(payments, forKey: "payments")
  aCoder.encode(orders, forKey: "orders")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        nickname = aDecoder.decodeObject(forKey:"nickname") as? String
        customId = aDecoder.decodeObject(forKey:"customId") as? String
        email = aDecoder.decodeObject(forKey:"email") as? String
        inviteSent = aDecoder.decodeObject(forKey:"inviteSent") as? Bool
        claimedTime = aDecoder.decodeObject(forKey:"claimedTime") as? Date
        deletedTime = aDecoder.decodeObject(forKey:"deletedTime") as? Date
        pin = aDecoder.decodeObject(forKey:"pin") as? String
        unhashedPin = aDecoder.decodeObject(forKey:"unhashedPin") as? String
        role = (aDecoder.decodeObject(forKey:"role") as? String) != nil ?
      CLVModels.Employees.AccountRole(rawValue: (aDecoder.decodeObject(forKey:"role") as! String)) : nil
        roles = aDecoder.decodeObject(forKey:"roles") as? [CLVModels.Employees.Role]
        isOwner = aDecoder.decodeObject(forKey:"isOwner") as? Bool
        shifts = aDecoder.decodeObject(forKey:"shifts") as? [CLVModels.Employees.Shift]
        payments = aDecoder.decodeObject(forKey:"payments") as? [CLVModels.Payments.Payment]
        orders = aDecoder.decodeObject(forKey:"orders") as? [CLVModels.Order.Order]
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        nickname <- map["nickname"]
        customId <- map["customId"]
        email <- map["email"]
        inviteSent <- map["inviteSent"]
        claimedTime <- (map["claimedTime"], CLVDateTransform())
        deletedTime <- (map["deletedTime"], CLVDateTransform())
        pin <- map["pin"]
        unhashedPin <- map["unhashedPin"]
        role <- map["role"]
        roles <- map["roles.elements"]
        isOwner <- map["isOwner"]
        shifts <- map["shifts.elements"]
        payments <- map["payments.elements"]
        orders <- map["orders.elements"]
  }
}

 
public enum Permission: String {
  case ORDERS_R
  case ORDERS_W
  case INVENTORY_R
  case INVENTORY_W
  case PAYMENTS_R
  case PAYMENTS_W
  case CUSTOMERS_R
  case CUSTOMERS_W
  case EMPLOYEES_R
  case EMPLOYEES_W
  case MERCHANT_R
  case MERCHANT_W
}

 
open class Permissions: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// A bitmap representing the permissions
    open var bits: Int?
    /// A readable list of permissions
    open var readablePermissions: [CLVModels.Employees.Permission]?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(bits, forKey: "bits")
  aCoder.encode(readablePermissions, forKey: "readablePermissions")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        bits = aDecoder.decodeObject(forKey:"bits") as? Int
        readablePermissions = aDecoder.decodeObject(forKey:"readablePermissions") as? [CLVModels.Employees.Permission]
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        bits <- map["bits"]
        readablePermissions <- map["readablePermissions.elements"]
  }
}

 
open class PermissionSet: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// Key of the permissionSet
    open var name: String?
    /// Label of the permissionSet
    open var label: String?
    open var app: CLVModels.Apps.App?
    open var employeeDefault: Bool?
    open var managerDefault: Bool?
    /// Bitmap of permissions
    open var permissions: CLVModels.Employees.Permissions?
    /// roles enabled for this merchant
    open var roles: [CLVModels.Employees.Role]?
    /// The module associated with this permission set (if any)
    open var module: CLVModels.Base.Reference?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(label, forKey: "label")
  aCoder.encode(app, forKey: "app")
  aCoder.encode(employeeDefault, forKey: "employeeDefault")
  aCoder.encode(managerDefault, forKey: "managerDefault")
  aCoder.encode(permissions, forKey: "permissions")
  aCoder.encode(roles, forKey: "roles")
  aCoder.encode(module, forKey: "module")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        label = aDecoder.decodeObject(forKey:"label") as? String
        app = aDecoder.decodeObject(forKey:"app") as? CLVModels.Apps.App
        employeeDefault = aDecoder.decodeObject(forKey:"employeeDefault") as? Bool
        managerDefault = aDecoder.decodeObject(forKey:"managerDefault") as? Bool
        permissions = aDecoder.decodeObject(forKey:"permissions") as? CLVModels.Employees.Permissions
        roles = aDecoder.decodeObject(forKey:"roles") as? [CLVModels.Employees.Role]
        module = aDecoder.decodeObject(forKey:"module") as? CLVModels.Base.Reference
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        label <- map["label"]
        app <- map["app"]
        employeeDefault <- map["employeeDefault"]
        managerDefault <- map["managerDefault"]
        permissions <- map["permissions"]
        roles <- map["roles.elements"]
        module <- map["module"]
  }
}

 
open class PermissionSetRole: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// The role
    open var role: CLVModels.Employees.Role?
    /// The role
    open var permissionSet: CLVModels.Employees.PermissionSet?
    open var modified_time: Int?
    open var deleted_time: Int?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(role, forKey: "role")
  aCoder.encode(permissionSet, forKey: "permissionSet")
  aCoder.encode(modified_time, forKey: "modified_time")
  aCoder.encode(deleted_time, forKey: "deleted_time")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        role = aDecoder.decodeObject(forKey:"role") as? CLVModels.Employees.Role
        permissionSet = aDecoder.decodeObject(forKey:"permissionSet") as? CLVModels.Employees.PermissionSet
        modified_time = aDecoder.decodeObject(forKey:"modified_time") as? Int
        deleted_time = aDecoder.decodeObject(forKey:"deleted_time") as? Int
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        role <- map["role"]
        permissionSet <- map["permissionSet"]
        modified_time <- map["modified_time"]
        deleted_time <- map["deleted_time"]
  }
}

 
open class Role: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// Full name of the role
    open var name: String?
    /// Base System Role
    open var systemRole: CLVModels.Employees.AccountRole?
    /// employees with this role
    open var employeesRef: [CLVModels.Employees.Employee]?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(systemRole?.rawValue, forKey: "systemRole")
  aCoder.encode(employeesRef, forKey: "employeesRef")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        systemRole = (aDecoder.decodeObject(forKey:"systemRole") as? String) != nil ?
      CLVModels.Employees.AccountRole(rawValue: (aDecoder.decodeObject(forKey:"systemRole") as! String)) : nil
        employeesRef = aDecoder.decodeObject(forKey:"employeesRef") as? [CLVModels.Employees.Employee]
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        systemRole <- map["systemRole"]
        employeesRef <- map["employeesRef.elements"]
  }
}

 
open class Shift: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// The employee that worked this shift
    open var employee: CLVModels.Employees.Employee?
    /// Amount of cash tips collected
    open var cashTipsCollected: Int?
    /// Whether the employee used server banking
    open var serverBanking: Bool?
    /// Clock in time
    open var inTime: Date?
    /// Overridden clock in time
    open var overrideInTime: Date?
    /// The employee who overrode the clock in time
    open var overrideInEmployee: CLVModels.Employees.Employee?
    /// Clock out time
    open var outTime: Date?
    /// Overridden clock out time
    open var overrideOutTime: Date?
    /// The employee who overrode the clock out time
    open var overrideOutEmployee: CLVModels.Employees.Employee?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(employee, forKey: "employee")
  aCoder.encode(cashTipsCollected, forKey: "cashTipsCollected")
  aCoder.encode(serverBanking, forKey: "serverBanking")
  aCoder.encode(inTime, forKey: "inTime")
  aCoder.encode(overrideInTime, forKey: "overrideInTime")
  aCoder.encode(overrideInEmployee, forKey: "overrideInEmployee")
  aCoder.encode(outTime, forKey: "outTime")
  aCoder.encode(overrideOutTime, forKey: "overrideOutTime")
  aCoder.encode(overrideOutEmployee, forKey: "overrideOutEmployee")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        employee = aDecoder.decodeObject(forKey:"employee") as? CLVModels.Employees.Employee
        cashTipsCollected = aDecoder.decodeObject(forKey:"cashTipsCollected") as? Int
        serverBanking = aDecoder.decodeObject(forKey:"serverBanking") as? Bool
        inTime = aDecoder.decodeObject(forKey:"inTime") as? Date
        overrideInTime = aDecoder.decodeObject(forKey:"overrideInTime") as? Date
        overrideInEmployee = aDecoder.decodeObject(forKey:"overrideInEmployee") as? CLVModels.Employees.Employee
        outTime = aDecoder.decodeObject(forKey:"outTime") as? Date
        overrideOutTime = aDecoder.decodeObject(forKey:"overrideOutTime") as? Date
        overrideOutEmployee = aDecoder.decodeObject(forKey:"overrideOutEmployee") as? CLVModels.Employees.Employee
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        employee <- map["employee"]
        cashTipsCollected <- map["cashTipsCollected"]
        serverBanking <- map["serverBanking"]
        inTime <- (map["inTime"], CLVDateTransform())
        overrideInTime <- (map["overrideInTime"], CLVDateTransform())
        overrideInEmployee <- map["overrideInEmployee"]
        outTime <- (map["outTime"], CLVDateTransform())
        overrideOutTime <- (map["overrideOutTime"], CLVDateTransform())
        overrideOutEmployee <- map["overrideOutEmployee"]
  }
}

}

}