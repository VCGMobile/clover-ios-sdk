/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
 
import ObjectMapper

extension CLVModels {

public class Exclusions {
 
open class SoftwareUpdateExclusion: NSObject, NSCoding, Mappable {
    /// Unique identifier
  open var id: String?
    /// Friendly name to describe the exclusion
  open var name: String?
    /// The merchant with which the exclusion is associated
  open var merchantRef: CLVModels.Base.Reference?
    /// Optional serial number to restrict updates for a particular device
  open var serialNumber: String?
    /// List of OTA reasons for which we should ignore this exclusion (e.g. 'boot')
  open var systemUpdateAllowedReasons: [String]?
    /// List of app updater reasons for which we should ignore this exclusion (e.g. 'boot')
  open var appUpdateAllowedReasons: [String]?
    /// Hours during which software updates should not be applied
  open var hours: CLVModels.Hours.HoursSet?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(merchantRef, forKey: "merchantRef")
  aCoder.encode(serialNumber, forKey: "serialNumber")
  aCoder.encode(systemUpdateAllowedReasons, forKey: "systemUpdateAllowedReasons")
  aCoder.encode(appUpdateAllowedReasons, forKey: "appUpdateAllowedReasons")
  aCoder.encode(hours, forKey: "hours")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        merchantRef = aDecoder.decodeObject(forKey:"merchantRef") as? CLVModels.Base.Reference
        serialNumber = aDecoder.decodeObject(forKey:"serialNumber") as? String
        systemUpdateAllowedReasons = aDecoder.decodeObject(forKey:"systemUpdateAllowedReasons") as? [String]
        appUpdateAllowedReasons = aDecoder.decodeObject(forKey:"appUpdateAllowedReasons") as? [String]
        hours = aDecoder.decodeObject(forKey:"hours") as? CLVModels.Hours.HoursSet
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        merchantRef <- map["merchantRef"]
        serialNumber <- map["serialNumber"]
        systemUpdateAllowedReasons <- map["systemUpdateAllowedReasons.elements"]
        appUpdateAllowedReasons <- map["appUpdateAllowedReasons.elements"]
        hours <- map["hours"]
  }
}

}

}