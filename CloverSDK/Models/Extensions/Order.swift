
/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */

import ObjectMapper

extension CLVModels {
  open class Order {


    public enum CustomerIdMethod: String {
      case NAME
      case TABLE
      case NAME_TABLE
    }



    open class Discount: NSObject, NSCoding, Mappable {
      /// Unique identifier
      open var id: String?
      /// The order with which the discount is associated
      open var orderRef: CLVModels.Order.Order?
      /// The lineItem with which the discount is associated
      open var lineItemRef: CLVModels.Order.LineItem?
      /// If this item is based on a standard discount, this will point to the appropriate inventory.Discount
      open var discount: CLVModels.Inventory.Discount?
      /// Name of the discount
      open var name: String?
      /// Discount amount in fraction of currency unit (e.g. cents) based on currency fraction digits supported
      open var amount: Int?
      /// Discount amount in percent
      open var percentage: Int?

      open func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(orderRef, forKey: "orderRef")
        aCoder.encode(lineItemRef, forKey: "lineItemRef")
        aCoder.encode(discount, forKey: "discount")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(amount, forKey: "amount")
        aCoder.encode(percentage, forKey: "percentage")
      }

      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        orderRef = aDecoder.decodeObject(forKey: "orderRef") as? CLVModels.Order.Order
        lineItemRef = aDecoder.decodeObject(forKey: "lineItemRef") as? CLVModels.Order.LineItem
        discount = aDecoder.decodeObject(forKey: "discount") as? CLVModels.Inventory.Discount
        name = aDecoder.decodeObject(forKey: "name") as? String
        amount = aDecoder.decodeObject(forKey: "amount") as? Int
        percentage = aDecoder.decodeObject(forKey: "percentage") as? Int
      }

      override public init() {}

      // Mappable

      required public init?(map: Map) {}

      open func mapping(map: Map) {
        id <- map["id"]
        orderRef <- map["orderRef"]
        lineItemRef <- map["lineItemRef"]
        discount <- map["discount"]
        name <- map["name"]
        amount <- map["amount"]
        percentage <- map["percentage"]
      }
    }



    open class FireOrder: NSObject, NSCoding, Mappable {
      /// Unique identifier
      open var id: String?
      /// The id of the order to fire.
      open var orderId: String?
      /// How long in seconds to wait before calling fire.
      open var delay: Int?

      open func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(orderId, forKey: "orderId")
        aCoder.encode(delay, forKey: "delay")
      }

      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        orderId = aDecoder.decodeObject(forKey: "orderId") as? String
        delay = aDecoder.decodeObject(forKey: "delay") as? Int
      }

      override public init() {}

      // Mappable

      required public init?(map: Map) {}

      open func mapping(map: Map) {
        id <- map["id"]
        orderId <- map["orderId"]
        delay <- map["delay"]
      }
    }



    public enum HoursAvailable: String {
      case ALL
      case BUSINESS
      case CUSTOM
    }



    open class LineItem: NSObject, NSCoding, Mappable {
      /// Unique identifier
      open var id: String?
      /// The order with which the line item is associated
      open var orderRef: CLVModels.Order.Order?
      /// Inventory item used to create this line item
      open var item: CLVModels.Inventory.Item?
      /// Line item name
      open var name: String?
      /// Alternate name of the line item
      open var alternateName: String?
      /// Price of the item, typically in cents; use priceType and merchant currency to determine actual item price
      open var price: Int?
      /// Unit quantity
      open var unitQty: Int?
      /// Unit name (e.g. oz, lb, etc.)
      open var unitName: String?
      open var itemCode: String?
      open var note: String?
      open var printed: Bool?
      open var exchangedLineItem: CLVModels.Order.LineItem?
      open var binName: String?
      open var userData: String?
      open var createdTime: Date?
      open var orderClientCreatedTime: Date?
      open var discounts: [CLVModels.Order.Discount]?
      /// does the calculated flag actually do anything?
      open var discountAmount: Int?
      open var exchanged: Bool?
      open var modifications: [CLVModels.Order.Modification]?
      open var refunded: Bool?
      /// True if this item should be counted as revenue, for example gift cards and donations would not
      open var isRevenue: Bool?
      open var taxRates: [CLVModels.Inventory.TaxRate]?
      /// Payments that were made for this line item
      open var payments: [CLVModels.Payments.LineItemPayment]?

      open func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(orderRef, forKey: "orderRef")
        aCoder.encode(item, forKey: "item")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(alternateName, forKey: "alternateName")
        aCoder.encode(price, forKey: "price")
        aCoder.encode(unitQty, forKey: "unitQty")
        aCoder.encode(unitName, forKey: "unitName")
        aCoder.encode(itemCode, forKey: "itemCode")
        aCoder.encode(note, forKey: "note")
        aCoder.encode(printed, forKey: "printed")
        aCoder.encode(exchangedLineItem, forKey: "exchangedLineItem")
        aCoder.encode(binName, forKey: "binName")
        aCoder.encode(userData, forKey: "userData")
        aCoder.encode(createdTime, forKey: "createdTime")
        aCoder.encode(orderClientCreatedTime, forKey: "orderClientCreatedTime")
        aCoder.encode(discounts, forKey: "discounts")
        aCoder.encode(discountAmount, forKey: "discountAmount")
        aCoder.encode(exchanged, forKey: "exchanged")
        aCoder.encode(modifications, forKey: "modifications")
        aCoder.encode(refunded, forKey: "refunded")
        aCoder.encode(isRevenue, forKey: "isRevenue")
        aCoder.encode(taxRates, forKey: "taxRates")
        aCoder.encode(payments, forKey: "payments")
      }

      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        orderRef = aDecoder.decodeObject(forKey: "orderRef") as? CLVModels.Order.Order
        item = aDecoder.decodeObject(forKey: "item") as? CLVModels.Inventory.Item
        name = aDecoder.decodeObject(forKey: "name") as? String
        alternateName = aDecoder.decodeObject(forKey: "alternateName") as? String
        price = aDecoder.decodeObject(forKey: "price") as? Int
        unitQty = aDecoder.decodeObject(forKey: "unitQty") as? Int
        unitName = aDecoder.decodeObject(forKey: "unitName") as? String
        itemCode = aDecoder.decodeObject(forKey: "itemCode") as? String
        note = aDecoder.decodeObject(forKey: "note") as? String
        printed = aDecoder.decodeObject(forKey: "printed") as? Bool
        exchangedLineItem = aDecoder.decodeObject(forKey: "exchangedLineItem") as? CLVModels.Order.LineItem
        binName = aDecoder.decodeObject(forKey: "binName") as? String
        userData = aDecoder.decodeObject(forKey: "userData") as? String
        createdTime = aDecoder.decodeObject(forKey: "createdTime") as? Date
        orderClientCreatedTime = aDecoder.decodeObject(forKey: "orderClientCreatedTime") as? Date
        discounts = aDecoder.decodeObject(forKey: "discounts") as? [CLVModels.Order.Discount]
        discountAmount = aDecoder.decodeObject(forKey: "discountAmount") as? Int
        exchanged = aDecoder.decodeObject(forKey: "exchanged") as? Bool
        modifications = aDecoder.decodeObject(forKey: "modifications") as? [CLVModels.Order.Modification]
        refunded = aDecoder.decodeObject(forKey: "refunded") as? Bool
        isRevenue = aDecoder.decodeObject(forKey: "isRevenue") as? Bool
        taxRates = aDecoder.decodeObject(forKey: "taxRates") as? [CLVModels.Inventory.TaxRate]
        payments = aDecoder.decodeObject(forKey: "payments") as? [CLVModels.Payments.LineItemPayment]
      }

      override public init() {}

      // Mappable

      required public init?(map: Map) {}

      open func mapping(map: Map) {
        id <- map["id"]
        orderRef <- map["orderRef"]
        item <- map["item"]
        name <- map["name"]
        alternateName <- map["alternateName"]
        price <- map["price"]
        unitQty <- map["unitQty"]
        unitName <- map["unitName"]
        itemCode <- map["itemCode"]
        note <- map["note"]
        printed <- map["printed"]
        exchangedLineItem <- map["exchangedLineItem"]
        binName <- map["binName"]
        userData <- map["userData"]
        createdTime <- (map["createdTime"], CLVDateTransform())
        orderClientCreatedTime <- (map["orderClientCreatedTime"], CLVDateTransform())
        discounts <- map["discounts.elements"]
        discountAmount <- map["discountAmount"]
        exchanged <- map["exchanged"]
        modifications <- map["modifications.elements"]
        refunded <- map["refunded"]
        isRevenue <- map["isRevenue"]
        taxRates <- map["taxRates.elements"]
        payments <- map["payments.elements"]
      }
    }



    /// Snapshot of a line item modifier at the time that the order was placed.
    open class Modification: NSObject, NSCoding, Mappable {
      open var id: String?
      /// The line item with which the modification is associated
      open var lineItemRef: CLVModels.Order.LineItem?
      open var name: String?
      open var alternateName: String?
      open var amount: Int?
      /// The modifier object.  Values from the Modifier are copied to the Modification at the time that the order is placed.  Modifier values may change after the order is placed.
      open var modifier: CLVModels.Inventory.Modifier?

      open func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(lineItemRef, forKey: "lineItemRef")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(alternateName, forKey: "alternateName")
        aCoder.encode(amount, forKey: "amount")
        aCoder.encode(modifier, forKey: "modifier")
      }

      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        lineItemRef = aDecoder.decodeObject(forKey: "lineItemRef") as? CLVModels.Order.LineItem
        name = aDecoder.decodeObject(forKey: "name") as? String
        alternateName = aDecoder.decodeObject(forKey: "alternateName") as? String
        amount = aDecoder.decodeObject(forKey: "amount") as? Int
        modifier = aDecoder.decodeObject(forKey: "modifier") as? CLVModels.Inventory.Modifier
      }

      override public init() {}

      // Mappable

      required public init?(map: Map) {}

      open func mapping(map: Map) {
        id <- map["id"]
        lineItemRef <- map["lineItemRef"]
        name <- map["name"]
        alternateName <- map["alternateName"]
        amount <- map["amount"]
        modifier <- map["modifier"]
      }
    }



    open class Order: NSObject, NSCoding, Mappable {
      /// Unique identifier
      open var id: String?
      /// Currency of this order
      open var currency: String?
      open var customers: [CLVModels.Customers.Customer]?
      /// The employee who took this order
      open var employee: CLVModels.Employees.Employee?
      /// Total price of the order
      open var total: Int?
      open var title: String?
      open var note: String?
      open var orderType: CLVModels.Order.OrderType?
      open var taxRemoved: Bool?
      open var isVat: Bool?
      open var state: String?
      open var manualTransaction: Bool?
      open var groupLineItems: Bool?
      open var testMode: Bool?
      open var payType: CLVModels.Order.PayType?
      /// Creation timestamp
      open var createdTime: Date?
      open var clientCreatedTime: Date?
      /// Last modified time of the order
      open var modifiedTime: Date?
      open var deletedTimestamp: Date?
      /// Optional service charge (gratuity) applied to this order
      open var serviceCharge: CLVModels.Base.ServiceCharge?
      open var discounts: [CLVModels.Order.Discount]?
      open var lineItems: [CLVModels.Order.LineItem]?
      open var taxRates: [CLVModels.Order.OrderTaxRate]?
      /// Payments that were made for this order
      open var payments: [CLVModels.Payments.Payment]?
      /// Refunds that were made for this order
      open var refunds: [CLVModels.Payments.Refund]?
      open var credits: [CLVModels.Payments.Credit]?
      /// Voided payments associated with this order
      open var voids: [CLVModels.Payments.Payment]?
      /// Device which created the order
      open var device: CLVModels.Device.Device?

      open func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(currency, forKey: "currency")
        aCoder.encode(customers, forKey: "customers")
        aCoder.encode(employee, forKey: "employee")
        aCoder.encode(total, forKey: "total")
        aCoder.encode(title, forKey: "title")
        aCoder.encode(note, forKey: "note")
        aCoder.encode(orderType, forKey: "orderType")
        aCoder.encode(taxRemoved, forKey: "taxRemoved")
        aCoder.encode(isVat, forKey: "isVat")
        aCoder.encode(state, forKey: "state")
        aCoder.encode(manualTransaction, forKey: "manualTransaction")
        aCoder.encode(groupLineItems, forKey: "groupLineItems")
        aCoder.encode(testMode, forKey: "testMode")
        aCoder.encode(payType?.rawValue, forKey: "payType")
        aCoder.encode(createdTime, forKey: "createdTime")
        aCoder.encode(clientCreatedTime, forKey: "clientCreatedTime")
        aCoder.encode(modifiedTime, forKey: "modifiedTime")
        aCoder.encode(deletedTimestamp, forKey: "deletedTimestamp")
        aCoder.encode(serviceCharge, forKey: "serviceCharge")
        aCoder.encode(discounts, forKey: "discounts")
        aCoder.encode(lineItems, forKey: "lineItems")
        aCoder.encode(taxRates, forKey: "taxRates")
        aCoder.encode(payments, forKey: "payments")
        aCoder.encode(refunds, forKey: "refunds")
        aCoder.encode(credits, forKey: "credits")
        aCoder.encode(voids, forKey: "voids")
        aCoder.encode(device, forKey: "device")
      }

      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        currency = aDecoder.decodeObject(forKey: "currency") as? String
        customers = aDecoder.decodeObject(forKey: "customers") as? [CLVModels.Customers.Customer]
        employee = aDecoder.decodeObject(forKey: "employee") as? CLVModels.Employees.Employee
        total = aDecoder.decodeObject(forKey: "total") as? Int
        title = aDecoder.decodeObject(forKey: "title") as? String
        note = aDecoder.decodeObject(forKey: "note") as? String
        orderType = aDecoder.decodeObject(forKey: "orderType") as? CLVModels.Order.OrderType
        taxRemoved = aDecoder.decodeObject(forKey: "taxRemoved") as? Bool
        isVat = aDecoder.decodeObject(forKey: "isVat") as? Bool
        state = aDecoder.decodeObject(forKey: "state") as? String
        manualTransaction = aDecoder.decodeObject(forKey: "manualTransaction") as? Bool
        groupLineItems = aDecoder.decodeObject(forKey: "groupLineItems") as? Bool
        testMode = aDecoder.decodeObject(forKey: "testMode") as? Bool
        payType = (aDecoder.decodeObject(forKey: "payType") as? String) != nil ?
          CLVModels.Order.PayType(rawValue: (aDecoder.decodeObject(forKey: "payType") as! String)) : nil
        createdTime = aDecoder.decodeObject(forKey: "createdTime") as? Date
        clientCreatedTime = aDecoder.decodeObject(forKey: "clientCreatedTime") as? Date
        modifiedTime = aDecoder.decodeObject(forKey: "modifiedTime") as? Date
        deletedTimestamp = aDecoder.decodeObject(forKey: "deletedTimestamp") as? Date
        serviceCharge = aDecoder.decodeObject(forKey: "serviceCharge") as? CLVModels.Base.ServiceCharge
        discounts = aDecoder.decodeObject(forKey: "discounts") as? [CLVModels.Order.Discount]
        lineItems = aDecoder.decodeObject(forKey: "lineItems") as? [CLVModels.Order.LineItem]
        taxRates = aDecoder.decodeObject(forKey: "taxRates") as? [CLVModels.Order.OrderTaxRate]
        payments = aDecoder.decodeObject(forKey: "payments") as? [CLVModels.Payments.Payment]
        refunds = aDecoder.decodeObject(forKey: "refunds") as? [CLVModels.Payments.Refund]
        credits = aDecoder.decodeObject(forKey: "credits") as? [CLVModels.Payments.Credit]
        voids = aDecoder.decodeObject(forKey: "voids") as? [CLVModels.Payments.Payment]
        device = aDecoder.decodeObject(forKey: "device") as? CLVModels.Device.Device
      }

      override public init() {}

      // Mappable

      required public init?(map: Map) {}

      open func mapping(map: Map) {
        id <- map["id"]
        currency <- map["currency"]
        customers <- map["customers.elements"]
        employee <- map["employee"]
        total <- map["total"]
        title <- map["title"]
        note <- map["note"]
        orderType <- map["orderType"]
        taxRemoved <- map["taxRemoved"]
        isVat <- map["isVat"]
        state <- map["state"]
        manualTransaction <- map["manualTransaction"]
        groupLineItems <- map["groupLineItems"]
        testMode <- map["testMode"]
        payType <- map["payType"]
        createdTime <- (map["createdTime"], CLVDateTransform())
        clientCreatedTime <- (map["clientCreatedTime"], CLVDateTransform())
        modifiedTime <- (map["modifiedTime"], CLVDateTransform())
        deletedTimestamp <- (map["deletedTimestamp"], CLVDateTransform())
        serviceCharge <- map["serviceCharge"]
        discounts <- map["discounts.elements"]
        lineItems <- map["lineItems.elements"]
        taxRates <- map["taxRates.elements"]
        payments <- map["payments.elements"]
        refunds <- map["refunds.elements"]
        credits <- map["credits.elements"]
        voids <- map["voids.elements"]
        device <- map["device"]
      }
    }



    open class OrderTaxRate: NSObject, NSCoding, Mappable {
      open var id: String?
      open var name: String?
      open var amount: Int?

      open func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(name, forKey: "name")
        aCoder.encode(amount, forKey: "amount")
      }

      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        name = aDecoder.decodeObject(forKey: "name") as? String
        amount = aDecoder.decodeObject(forKey: "amount") as? Int
      }

      override public init() {}

      // Mappable

      required public init?(map: Map) {}

      open func mapping(map: Map) {
        id <- map["id"]
        name <- map["name"]
        amount <- map["amount"]
      }
    }



    open class OrderType: NSObject, NSCoding, Mappable {
      /// Unique identifier
      open var id: String?
      /// Label Key
      open var labelKey: String?
      /// Label Key
      open var label: String?
      /// If this order type is taxable
      open var taxable: Bool?
      /// If this order type is the default
      open var isDefault: Bool?
      /// If set to false, then this order type includes all of the merchant's categories. Otherwise, it only contains the categories defined in the "categories" field on this object.
      open var filterCategories: Bool?
      /// If this order type is hidden on the register
      open var isHidden: Bool?
      /// The price of a fee added to this order type
      open var fee: Int?
      /// The minimum amount required for an order to be placed
      open var minOrderAmount: Int?
      /// The maximum amount for an order allowed
      open var maxOrderAmount: Int?
      /// The maximum radius allowed for an order (i.e. delivery)
      open var maxRadius: Int?
      /// The average time it takes to complete the order
      open var avgOrderTime: Int?
      open var hoursAvailable: CLVModels.Order.HoursAvailable?
      open var customerIdMethod: CLVModels.Order.CustomerIdMethod?
      /// If this order type is deleted
      open var isDeleted: Bool?
      /// Optional system order type that this order type is associated with.
      open var systemOrderTypeId: String?
      /// The hours this order type is available (if they differ from normal merchant hours)
      open var hours: CLVModels.Hours.HoursSet?
      /// The categories of items that can be assigned to this order type
      open var categories: [CLVModels.Inventory.Category]?

      open func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(labelKey, forKey: "labelKey")
        aCoder.encode(label, forKey: "label")
        aCoder.encode(taxable, forKey: "taxable")
        aCoder.encode(isDefault, forKey: "isDefault")
        aCoder.encode(filterCategories, forKey: "filterCategories")
        aCoder.encode(isHidden, forKey: "isHidden")
        aCoder.encode(fee, forKey: "fee")
        aCoder.encode(minOrderAmount, forKey: "minOrderAmount")
        aCoder.encode(maxOrderAmount, forKey: "maxOrderAmount")
        aCoder.encode(maxRadius, forKey: "maxRadius")
        aCoder.encode(avgOrderTime, forKey: "avgOrderTime")
        aCoder.encode(hoursAvailable?.rawValue, forKey: "hoursAvailable")
        aCoder.encode(customerIdMethod?.rawValue, forKey: "customerIdMethod")
        aCoder.encode(isDeleted, forKey: "isDeleted")
        aCoder.encode(systemOrderTypeId, forKey: "systemOrderTypeId")
        aCoder.encode(hours, forKey: "hours")
        aCoder.encode(categories, forKey: "categories")
      }

      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        labelKey = aDecoder.decodeObject(forKey: "labelKey") as? String
        label = aDecoder.decodeObject(forKey: "label") as? String
        taxable = aDecoder.decodeObject(forKey: "taxable") as? Bool
        isDefault = aDecoder.decodeObject(forKey: "isDefault") as? Bool
        filterCategories = aDecoder.decodeObject(forKey: "filterCategories") as? Bool
        isHidden = aDecoder.decodeObject(forKey: "isHidden") as? Bool
        fee = aDecoder.decodeObject(forKey: "fee") as? Int
        minOrderAmount = aDecoder.decodeObject(forKey: "minOrderAmount") as? Int
        maxOrderAmount = aDecoder.decodeObject(forKey: "maxOrderAmount") as? Int
        maxRadius = aDecoder.decodeObject(forKey: "maxRadius") as? Int
        avgOrderTime = aDecoder.decodeObject(forKey: "avgOrderTime") as? Int
        hoursAvailable = (aDecoder.decodeObject(forKey: "hoursAvailable") as? String) != nil ?
          CLVModels.Order.HoursAvailable(rawValue: (aDecoder.decodeObject(forKey: "hoursAvailable") as! String)) : nil
        customerIdMethod = (aDecoder.decodeObject(forKey: "customerIdMethod") as? String) != nil ?
          CLVModels.Order.CustomerIdMethod(rawValue: (aDecoder.decodeObject(forKey: "customerIdMethod") as! String)) : nil
        isDeleted = aDecoder.decodeObject(forKey: "isDeleted") as? Bool
        systemOrderTypeId = aDecoder.decodeObject(forKey: "systemOrderTypeId") as? String
        hours = aDecoder.decodeObject(forKey: "hours") as? CLVModels.Hours.HoursSet
        categories = aDecoder.decodeObject(forKey: "categories") as? [CLVModels.Inventory.Category]
      }

      override public init() {}

      // Mappable

      required public init?(map: Map) {}

      open func mapping(map: Map) {
        id <- map["id"]
        labelKey <- map["labelKey"]
        label <- map["label"]
        taxable <- map["taxable"]
        isDefault <- map["isDefault"]
        filterCategories <- map["filterCategories"]
        isHidden <- map["isHidden"]
        fee <- map["fee"]
        minOrderAmount <- map["minOrderAmount"]
        maxOrderAmount <- map["maxOrderAmount"]
        maxRadius <- map["maxRadius"]
        avgOrderTime <- map["avgOrderTime"]
        hoursAvailable <- map["hoursAvailable"]
        customerIdMethod <- map["customerIdMethod"]
        isDeleted <- map["isDeleted"]
        systemOrderTypeId <- map["systemOrderTypeId"]
        hours <- map["hours"]
        categories <- map["categories.elements"]
      }
    }



    open class OrderTypeCategory: NSObject, NSCoding, Mappable {
      open var orderType: CLVModels.Order.OrderType?
      open var category: CLVModels.Inventory.Category?

      open func encode(with aCoder: NSCoder) {
        aCoder.encode(orderType, forKey: "orderType")
        aCoder.encode(category, forKey: "category")
      }

      required public init(coder aDecoder: NSCoder) {
        orderType = aDecoder.decodeObject(forKey: "orderType") as? CLVModels.Order.OrderType
        category = aDecoder.decodeObject(forKey: "category") as? CLVModels.Inventory.Category
      }

      override public init() {}

      // Mappable

      required public init?(map: Map) {}

      open func mapping(map: Map) {
        orderType <- map["orderType"]
        category <- map["category"]
      }
    }



    public enum PayType: String {
      case SPLIT_GUEST
      case SPLIT_ITEM
      case SPLIT_CUSTOM
      case FULL
    }



    open class SystemOrderType: NSObject, NSCoding, Mappable {
      /// Unqiue identifier
      open var id: String?
      /// Label Key
      open var labelKey: String?
      /// Is for quick service restraunts?
      open var isQsr: Bool?
      /// Is for full service restraunts?
      open var isFsr: Bool?
      /// Is for retail stores?
      open var isRetail: Bool?

      open func encode(with aCoder: NSCoder) {
        aCoder.encode(id, forKey: "id")
        aCoder.encode(labelKey, forKey: "labelKey")
        aCoder.encode(isQsr, forKey: "isQsr")
        aCoder.encode(isFsr, forKey: "isFsr")
        aCoder.encode(isRetail, forKey: "isRetail")
      }

      required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey: "id") as? String
        labelKey = aDecoder.decodeObject(forKey: "labelKey") as? String
        isQsr = aDecoder.decodeObject(forKey: "isQsr") as? Bool
        isFsr = aDecoder.decodeObject(forKey: "isFsr") as? Bool
        isRetail = aDecoder.decodeObject(forKey: "isRetail") as? Bool
      }

      override public init() {}

      // Mappable

      required public init?(map: Map) {}

      open func mapping(map: Map) {
        id <- map["id"]
        labelKey <- map["labelKey"]
        isQsr <- map["isQsr"]
        isFsr <- map["isFsr"]
        isRetail <- map["isRetail"]
      }
    }



    /// Symbols beginning with USER_ or REJECT_ are user-initiated.  Others are client- or server-initiated.
    public enum VoidReason: String {
      case USER_CANCEL
      case TRANSPORT_ERROR
      case REJECT_SIGNATURE
      case REJECT_PARTIAL_AUTH
      case NOT_APPROVED
      case FAILED
      case AUTH_CLOSED_NEW_CARD
      case DEVELOPER_PAY_PARTIAL_AUTH
      case REJECT_DUPLICATE
    }

  }
}
