/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
 
import ObjectMapper

extension CLVModels {

public class Device {
 
public enum BuildType: String {
  case ENG
  case USER
}

 
open class Device: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// Name of the device (if entered)
    open var name: String?
    open var model: String?
    open var merchant: CLVModels.Base.Reference?
    /// A prefix that will be applied to order numbers. This is useful if the merchant and/or customer needs to track which device an order came from.
    open var orderPrefix: String?
    open var terminalPrefix: Int?
    /// The device's serial number.
    open var serial: String?
    open var buildNumber: Int?
    open var secureId: String?
    open var buildType: CLVModels.Device.BuildType?
    open var cpuId: String?
    /// The IMEI of the device
    open var imei: String?
    /// The IMSI of the SIM in the device (if present)
    open var imsi: String?
    /// The ICCID of the SIM in the device (if present)
    open var simIccid: String?
    open var deviceCertificate: String?
    open var pedCertificate: String?
    /// The type of device. Possible values are "GOLDLEAF" (Station), "LEAFCUTTER" (Mobile), "MAPLECUTTER" (Mini), "CLOVER_GO" (Clover Go), or "OTHER" (Unknown).
    open var deviceTypeName: String?
    /// Whether this device has PIN prompt disabled.
    open var pinDisabled: Bool?
    open var offlinePayments: Bool?
    open var offlinePaymentsAll: Bool?
    open var offlinePaymentsLimit: Int?
    open var offlinePaymentsPromptThreshold: Int?
    open var offlinePaymentsTotalPaymentsLimit: Int?
    open var offlinePaymentsLimitDefault: Int?
    open var offlinePaymentsPromptThresholdDefault: Int?
    open var offlinePaymentsTotalPaymentsLimitDefault: Int?
    open var offlinePaymentsMaxLimit: Int?
    open var offlinePaymentsMaxTotalPaymentsLimit: Int?
    open var showOfflinePayments: Bool?
    open var maxOfflineDays: Int?
    open var allowStoreAndForward: Bool?
    open var secureReports: [CLVModels.Base.Reference]?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(model, forKey: "model")
  aCoder.encode(merchant, forKey: "merchant")
  aCoder.encode(orderPrefix, forKey: "orderPrefix")
  aCoder.encode(terminalPrefix, forKey: "terminalPrefix")
  aCoder.encode(serial, forKey: "serial")
  aCoder.encode(buildNumber, forKey: "buildNumber")
  aCoder.encode(secureId, forKey: "secureId")
  aCoder.encode(buildType?.rawValue, forKey: "buildType")
  aCoder.encode(cpuId, forKey: "cpuId")
  aCoder.encode(imei, forKey: "imei")
  aCoder.encode(imsi, forKey: "imsi")
  aCoder.encode(simIccid, forKey: "simIccid")
  aCoder.encode(deviceCertificate, forKey: "deviceCertificate")
  aCoder.encode(pedCertificate, forKey: "pedCertificate")
  aCoder.encode(deviceTypeName, forKey: "deviceTypeName")
  aCoder.encode(pinDisabled, forKey: "pinDisabled")
  aCoder.encode(offlinePayments, forKey: "offlinePayments")
  aCoder.encode(offlinePaymentsAll, forKey: "offlinePaymentsAll")
  aCoder.encode(offlinePaymentsLimit, forKey: "offlinePaymentsLimit")
  aCoder.encode(offlinePaymentsPromptThreshold, forKey: "offlinePaymentsPromptThreshold")
  aCoder.encode(offlinePaymentsTotalPaymentsLimit, forKey: "offlinePaymentsTotalPaymentsLimit")
  aCoder.encode(offlinePaymentsLimitDefault, forKey: "offlinePaymentsLimitDefault")
  aCoder.encode(offlinePaymentsPromptThresholdDefault, forKey: "offlinePaymentsPromptThresholdDefault")
  aCoder.encode(offlinePaymentsTotalPaymentsLimitDefault, forKey: "offlinePaymentsTotalPaymentsLimitDefault")
  aCoder.encode(offlinePaymentsMaxLimit, forKey: "offlinePaymentsMaxLimit")
  aCoder.encode(offlinePaymentsMaxTotalPaymentsLimit, forKey: "offlinePaymentsMaxTotalPaymentsLimit")
  aCoder.encode(showOfflinePayments, forKey: "showOfflinePayments")
  aCoder.encode(maxOfflineDays, forKey: "maxOfflineDays")
  aCoder.encode(allowStoreAndForward, forKey: "allowStoreAndForward")
  aCoder.encode(secureReports, forKey: "secureReports")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        model = aDecoder.decodeObject(forKey:"model") as? String
        merchant = aDecoder.decodeObject(forKey:"merchant") as? CLVModels.Base.Reference
        orderPrefix = aDecoder.decodeObject(forKey:"orderPrefix") as? String
        terminalPrefix = aDecoder.decodeObject(forKey:"terminalPrefix") as? Int
        serial = aDecoder.decodeObject(forKey:"serial") as? String
        buildNumber = aDecoder.decodeObject(forKey:"buildNumber") as? Int
        secureId = aDecoder.decodeObject(forKey:"secureId") as? String
        buildType = (aDecoder.decodeObject(forKey:"buildType") as? String) != nil ?
      CLVModels.Device.BuildType(rawValue: (aDecoder.decodeObject(forKey:"buildType") as! String)) : nil
        cpuId = aDecoder.decodeObject(forKey:"cpuId") as? String
        imei = aDecoder.decodeObject(forKey:"imei") as? String
        imsi = aDecoder.decodeObject(forKey:"imsi") as? String
        simIccid = aDecoder.decodeObject(forKey:"simIccid") as? String
        deviceCertificate = aDecoder.decodeObject(forKey:"deviceCertificate") as? String
        pedCertificate = aDecoder.decodeObject(forKey:"pedCertificate") as? String
        deviceTypeName = aDecoder.decodeObject(forKey:"deviceTypeName") as? String
        pinDisabled = aDecoder.decodeObject(forKey:"pinDisabled") as? Bool
        offlinePayments = aDecoder.decodeObject(forKey:"offlinePayments") as? Bool
        offlinePaymentsAll = aDecoder.decodeObject(forKey:"offlinePaymentsAll") as? Bool
        offlinePaymentsLimit = aDecoder.decodeObject(forKey:"offlinePaymentsLimit") as? Int
        offlinePaymentsPromptThreshold = aDecoder.decodeObject(forKey:"offlinePaymentsPromptThreshold") as? Int
        offlinePaymentsTotalPaymentsLimit = aDecoder.decodeObject(forKey:"offlinePaymentsTotalPaymentsLimit") as? Int
        offlinePaymentsLimitDefault = aDecoder.decodeObject(forKey:"offlinePaymentsLimitDefault") as? Int
        offlinePaymentsPromptThresholdDefault = aDecoder.decodeObject(forKey:"offlinePaymentsPromptThresholdDefault") as? Int
        offlinePaymentsTotalPaymentsLimitDefault = aDecoder.decodeObject(forKey:"offlinePaymentsTotalPaymentsLimitDefault") as? Int
        offlinePaymentsMaxLimit = aDecoder.decodeObject(forKey:"offlinePaymentsMaxLimit") as? Int
        offlinePaymentsMaxTotalPaymentsLimit = aDecoder.decodeObject(forKey:"offlinePaymentsMaxTotalPaymentsLimit") as? Int
        showOfflinePayments = aDecoder.decodeObject(forKey:"showOfflinePayments") as? Bool
        maxOfflineDays = aDecoder.decodeObject(forKey:"maxOfflineDays") as? Int
        allowStoreAndForward = aDecoder.decodeObject(forKey:"allowStoreAndForward") as? Bool
        secureReports = aDecoder.decodeObject(forKey:"secureReports") as? [CLVModels.Base.Reference]
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        model <- map["model"]
        merchant <- map["merchant"]
        orderPrefix <- map["orderPrefix"]
        terminalPrefix <- map["terminalPrefix"]
        serial <- map["serial"]
        buildNumber <- map["buildNumber"]
        secureId <- map["secureId"]
        buildType <- map["buildType"]
        cpuId <- map["cpuId"]
        imei <- map["imei"]
        imsi <- map["imsi"]
        simIccid <- map["simIccid"]
        deviceCertificate <- map["deviceCertificate"]
        pedCertificate <- map["pedCertificate"]
        deviceTypeName <- map["deviceTypeName"]
        pinDisabled <- map["pinDisabled"]
        offlinePayments <- map["offlinePayments"]
        offlinePaymentsAll <- map["offlinePaymentsAll"]
        offlinePaymentsLimit <- map["offlinePaymentsLimit"]
        offlinePaymentsPromptThreshold <- map["offlinePaymentsPromptThreshold"]
        offlinePaymentsTotalPaymentsLimit <- map["offlinePaymentsTotalPaymentsLimit"]
        offlinePaymentsLimitDefault <- map["offlinePaymentsLimitDefault"]
        offlinePaymentsPromptThresholdDefault <- map["offlinePaymentsPromptThresholdDefault"]
        offlinePaymentsTotalPaymentsLimitDefault <- map["offlinePaymentsTotalPaymentsLimitDefault"]
        offlinePaymentsMaxLimit <- map["offlinePaymentsMaxLimit"]
        offlinePaymentsMaxTotalPaymentsLimit <- map["offlinePaymentsMaxTotalPaymentsLimit"]
        showOfflinePayments <- map["showOfflinePayments"]
        maxOfflineDays <- map["maxOfflineDays"]
        allowStoreAndForward <- map["allowStoreAndForward"]
        secureReports <- map["secureReports.elements"]
  }
}

 
open class DeviceProvision: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    open var deviceRef: CLVModels.Device.Device?
    open var state: CLVModels.Device.DeviceProvisionState?
    open var lastActivationCode: String?
    open var activationCode: String?
    open var emailSent: Bool?
    open var hasShipment: Bool?
    open var serialNumber: String?
    open var merchant: CLVModels.Merchant.Merchant?
    open var deviceType: String?
    open var provisionedTime: Date?
    open var activatedTime: Date?
    open var reseller: CLVModels.Base.Reference?
    open var currentRom: CLVModels.Device.Rom?
    open var currentSecureBoardRom: CLVModels.Device.Rom?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(deviceRef, forKey: "deviceRef")
  aCoder.encode(state?.rawValue, forKey: "state")
  aCoder.encode(lastActivationCode, forKey: "lastActivationCode")
  aCoder.encode(activationCode, forKey: "activationCode")
  aCoder.encode(emailSent, forKey: "emailSent")
  aCoder.encode(hasShipment, forKey: "hasShipment")
  aCoder.encode(serialNumber, forKey: "serialNumber")
  aCoder.encode(merchant, forKey: "merchant")
  aCoder.encode(deviceType, forKey: "deviceType")
  aCoder.encode(provisionedTime, forKey: "provisionedTime")
  aCoder.encode(activatedTime, forKey: "activatedTime")
  aCoder.encode(reseller, forKey: "reseller")
  aCoder.encode(currentRom, forKey: "currentRom")
  aCoder.encode(currentSecureBoardRom, forKey: "currentSecureBoardRom")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        deviceRef = aDecoder.decodeObject(forKey:"deviceRef") as? CLVModels.Device.Device
        state = (aDecoder.decodeObject(forKey:"state") as? String) != nil ?
      CLVModels.Device.DeviceProvisionState(rawValue: (aDecoder.decodeObject(forKey:"state") as! String)) : nil
        lastActivationCode = aDecoder.decodeObject(forKey:"lastActivationCode") as? String
        activationCode = aDecoder.decodeObject(forKey:"activationCode") as? String
        emailSent = aDecoder.decodeObject(forKey:"emailSent") as? Bool
        hasShipment = aDecoder.decodeObject(forKey:"hasShipment") as? Bool
        serialNumber = aDecoder.decodeObject(forKey:"serialNumber") as? String
        merchant = aDecoder.decodeObject(forKey:"merchant") as? CLVModels.Merchant.Merchant
        deviceType = aDecoder.decodeObject(forKey:"deviceType") as? String
        provisionedTime = aDecoder.decodeObject(forKey:"provisionedTime") as? Date
        activatedTime = aDecoder.decodeObject(forKey:"activatedTime") as? Date
        reseller = aDecoder.decodeObject(forKey:"reseller") as? CLVModels.Base.Reference
        currentRom = aDecoder.decodeObject(forKey:"currentRom") as? CLVModels.Device.Rom
        currentSecureBoardRom = aDecoder.decodeObject(forKey:"currentSecureBoardRom") as? CLVModels.Device.Rom
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        deviceRef <- map["deviceRef"]
        state <- map["state"]
        lastActivationCode <- map["lastActivationCode"]
        activationCode <- map["activationCode"]
        emailSent <- map["emailSent"]
        hasShipment <- map["hasShipment"]
        serialNumber <- map["serialNumber"]
        merchant <- map["merchant"]
        deviceType <- map["deviceType"]
        provisionedTime <- (map["provisionedTime"], CLVDateTransform())
        activatedTime <- (map["activatedTime"], CLVDateTransform())
        reseller <- map["reseller"]
        currentRom <- map["currentRom"]
        currentSecureBoardRom <- map["currentSecureBoardRom"]
  }
}

 
public enum DeviceProvisionState: String {
  case NOT_ASSOCIATED
  case DISASSOCIATED
  case ASSOCIATED
}

 
open class LimitedDevice: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// Name of the device (if entered)
    open var name: String?
    /// The device's serial number.
    open var serial: String?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(serial, forKey: "serial")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        serial = aDecoder.decodeObject(forKey:"serial") as? String
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        serial <- map["serial"]
  }
}

 
open class Rom: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// When the ROM was created
    open var createdAt: Int?
    open var version_: Int?
    open var versionName: String?
    open var description_: String?
    open var buildType: CLVModels.Device.RomBuildType?
    open var isCritical: Bool?
    open var published: Bool?
    open var enabled: Bool?
    /// When the ROM was associated with a merchant group
    open var associationTime: Date?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(createdAt, forKey: "createdAt")
  aCoder.encode(version_, forKey: "version_")
  aCoder.encode(versionName, forKey: "versionName")
  aCoder.encode(description_, forKey: "description_")
  aCoder.encode(buildType?.rawValue, forKey: "buildType")
  aCoder.encode(isCritical, forKey: "isCritical")
  aCoder.encode(published, forKey: "published")
  aCoder.encode(enabled, forKey: "enabled")
  aCoder.encode(associationTime, forKey: "associationTime")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        createdAt = aDecoder.decodeObject(forKey:"createdAt") as? Int
        version_ = aDecoder.decodeObject(forKey:"version_") as? Int
        versionName = aDecoder.decodeObject(forKey:"versionName") as? String
        description_ = aDecoder.decodeObject(forKey:"description_") as? String
        buildType = (aDecoder.decodeObject(forKey:"buildType") as? String) != nil ?
      CLVModels.Device.RomBuildType(rawValue: (aDecoder.decodeObject(forKey:"buildType") as! String)) : nil
        isCritical = aDecoder.decodeObject(forKey:"isCritical") as? Bool
        published = aDecoder.decodeObject(forKey:"published") as? Bool
        enabled = aDecoder.decodeObject(forKey:"enabled") as? Bool
        associationTime = aDecoder.decodeObject(forKey:"associationTime") as? Date
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        createdAt <- map["createdAt"]
        version_ <- map["version"]
        versionName <- map["versionName"]
        description_ <- map["description"]
        buildType <- map["buildType"]
        isCritical <- map["isCritical"]
        published <- map["published"]
        enabled <- map["enabled"]
        associationTime <- (map["associationTime"], CLVDateTransform())
  }
}

 
public enum RomBuildType: String {
  case ENG
  case USER
}

 
open class SwapRequestEvent: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    open var type_: String?
    open var serialNumber: String?
    open var createdTime: Date?
    open var merchant: CLVModels.Base.Reference?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(type_, forKey: "type_")
  aCoder.encode(serialNumber, forKey: "serialNumber")
  aCoder.encode(createdTime, forKey: "createdTime")
  aCoder.encode(merchant, forKey: "merchant")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        type_ = aDecoder.decodeObject(forKey:"type_") as? String
        serialNumber = aDecoder.decodeObject(forKey:"serialNumber") as? String
        createdTime = aDecoder.decodeObject(forKey:"createdTime") as? Date
        merchant = aDecoder.decodeObject(forKey:"merchant") as? CLVModels.Base.Reference
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        type_ <- map["type"]
        serialNumber <- map["serialNumber"]
        createdTime <- (map["createdTime"], CLVDateTransform())
        merchant <- map["merchant"]
  }
}

}

}