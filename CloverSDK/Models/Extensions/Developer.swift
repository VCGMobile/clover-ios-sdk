/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
 
import ObjectMapper

extension CLVModels {

public class Developer {
 
open class Developer: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// Developer's name.  Could be a company name.  Whatever is to be shown as who made the app in App Marketplace, e.g. NoshList, Pioneer Works Inc., Seven Spaces, etc.  Also used as (optional) Business DBA (Doing Business Name) name when sending to Braintree for app billing background check.
    open var name: String?
    /// Developer's individual first name
    open var firstName: String?
    /// Developer's individual last name
    open var lastName: String?
    /// Developer's email
    open var email: String?
    /// Developer's phone
    open var phone: String?
    /// Developer's date of birth
    open var dob: String?
    /// Developer's SSN; won't be stored in the clear in the DB; will be stored encrypted in sensitiveInfo
    open var ssn: String?
    /// Developer's address
    open var address: String?
    /// Developer's city
    open var city: String?
    /// Developer's county
    open var county: String?
    /// Developer's state
    open var state: String?
    /// Developer's country
    open var country: String?
    /// Developer's postal code
    open var postalCode: String?
    /// Developer's bank account number; won't be stored in the clear in the DB; will be stored encrypted in sensitiveInfo
    open var bankAccountNumber: String?
    /// Developer's bank routing number
    open var bankRoutingNumber: String?
    /// Developer's business legal name
    open var businessLegalName: String?
    /// Developer's Tax ID
    open var tin: String?
    /// Developer's VAT Register Number
    open var vatRegisterNumber: String?
    /// Sensitive data encrypted
    open var sensitiveData: String?
    /// Developer's business address
    open var businessAddress: String?
    /// Developer's business city
    open var businessCity: String?
    /// Developer's business state
    open var businessState: String?
    /// Developer's business country
    open var businessCountry: String?
    /// Developer's business postal code
    open var businessPostalCode: String?
    /// Developer's billing status
    open var billingStatus: CLVModels.Developer.DeveloperBillingStatus?
    /// Developer's billing status message
    open var billingStatusMessage: String?
    open var approvalStatus: CLVModels.Base.ApprovalStatus?
    /// If the user has accepted the developer agreement
    open var acceptedAgreement: Bool?
    /// Name of public relations contact
    open var prName: String?
    /// Email of public relations contact
    open var prEmail: String?
    /// Phone of public relations contact
    open var prPhone: String?
    /// Developer's business website
    open var website: String?
    /// Timestamp indicating the last time the developer was modified.
    open var modifiedTime: Date?
    /// The user account that owns this developer account.
    open var owner: CLVModels.Account.Account?
    /// Temporary while we are switching US billing systems
    open var appBillingSystem: String?
    /// The Infolease vendor code.  This is generated when the developer is on-boarded in the Infolease system.
    open var infoleaseVendorCode: String?
    /// The Infolease GL (General Ledger) code.  Only for specific apps.  Will usually be null.
    open var infoleaseGlCode: String?
    /// Signor name for developer referral program
    open var signorName: String?
    /// Signor title for developer referral program
    open var signorTitle: String?
    /// Timestamp indicating when the developer referral form was submitted
    open var referralSubmissionTime: Date?
    /// Optional email field used by Clover support for high priority communications.
    open var emergencyEmail: String?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(firstName, forKey: "firstName")
  aCoder.encode(lastName, forKey: "lastName")
  aCoder.encode(email, forKey: "email")
  aCoder.encode(phone, forKey: "phone")
  aCoder.encode(dob, forKey: "dob")
  aCoder.encode(ssn, forKey: "ssn")
  aCoder.encode(address, forKey: "address")
  aCoder.encode(city, forKey: "city")
  aCoder.encode(county, forKey: "county")
  aCoder.encode(state, forKey: "state")
  aCoder.encode(country, forKey: "country")
  aCoder.encode(postalCode, forKey: "postalCode")
  aCoder.encode(bankAccountNumber, forKey: "bankAccountNumber")
  aCoder.encode(bankRoutingNumber, forKey: "bankRoutingNumber")
  aCoder.encode(businessLegalName, forKey: "businessLegalName")
  aCoder.encode(tin, forKey: "tin")
  aCoder.encode(vatRegisterNumber, forKey: "vatRegisterNumber")
  aCoder.encode(sensitiveData, forKey: "sensitiveData")
  aCoder.encode(businessAddress, forKey: "businessAddress")
  aCoder.encode(businessCity, forKey: "businessCity")
  aCoder.encode(businessState, forKey: "businessState")
  aCoder.encode(businessCountry, forKey: "businessCountry")
  aCoder.encode(businessPostalCode, forKey: "businessPostalCode")
  aCoder.encode(billingStatus?.rawValue, forKey: "billingStatus")
  aCoder.encode(billingStatusMessage, forKey: "billingStatusMessage")
  aCoder.encode(approvalStatus?.rawValue, forKey: "approvalStatus")
  aCoder.encode(acceptedAgreement, forKey: "acceptedAgreement")
  aCoder.encode(prName, forKey: "prName")
  aCoder.encode(prEmail, forKey: "prEmail")
  aCoder.encode(prPhone, forKey: "prPhone")
  aCoder.encode(website, forKey: "website")
  aCoder.encode(modifiedTime, forKey: "modifiedTime")
  aCoder.encode(owner, forKey: "owner")
  aCoder.encode(appBillingSystem, forKey: "appBillingSystem")
  aCoder.encode(infoleaseVendorCode, forKey: "infoleaseVendorCode")
  aCoder.encode(infoleaseGlCode, forKey: "infoleaseGlCode")
  aCoder.encode(signorName, forKey: "signorName")
  aCoder.encode(signorTitle, forKey: "signorTitle")
  aCoder.encode(referralSubmissionTime, forKey: "referralSubmissionTime")
  aCoder.encode(emergencyEmail, forKey: "emergencyEmail")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        firstName = aDecoder.decodeObject(forKey:"firstName") as? String
        lastName = aDecoder.decodeObject(forKey:"lastName") as? String
        email = aDecoder.decodeObject(forKey:"email") as? String
        phone = aDecoder.decodeObject(forKey:"phone") as? String
        dob = aDecoder.decodeObject(forKey:"dob") as? String
        ssn = aDecoder.decodeObject(forKey:"ssn") as? String
        address = aDecoder.decodeObject(forKey:"address") as? String
        city = aDecoder.decodeObject(forKey:"city") as? String
        county = aDecoder.decodeObject(forKey:"county") as? String
        state = aDecoder.decodeObject(forKey:"state") as? String
        country = aDecoder.decodeObject(forKey:"country") as? String
        postalCode = aDecoder.decodeObject(forKey:"postalCode") as? String
        bankAccountNumber = aDecoder.decodeObject(forKey:"bankAccountNumber") as? String
        bankRoutingNumber = aDecoder.decodeObject(forKey:"bankRoutingNumber") as? String
        businessLegalName = aDecoder.decodeObject(forKey:"businessLegalName") as? String
        tin = aDecoder.decodeObject(forKey:"tin") as? String
        vatRegisterNumber = aDecoder.decodeObject(forKey:"vatRegisterNumber") as? String
        sensitiveData = aDecoder.decodeObject(forKey:"sensitiveData") as? String
        businessAddress = aDecoder.decodeObject(forKey:"businessAddress") as? String
        businessCity = aDecoder.decodeObject(forKey:"businessCity") as? String
        businessState = aDecoder.decodeObject(forKey:"businessState") as? String
        businessCountry = aDecoder.decodeObject(forKey:"businessCountry") as? String
        businessPostalCode = aDecoder.decodeObject(forKey:"businessPostalCode") as? String
        billingStatus = (aDecoder.decodeObject(forKey:"billingStatus") as? String) != nil ?
      CLVModels.Developer.DeveloperBillingStatus(rawValue: (aDecoder.decodeObject(forKey:"billingStatus") as! String)) : nil
        billingStatusMessage = aDecoder.decodeObject(forKey:"billingStatusMessage") as? String
        approvalStatus = (aDecoder.decodeObject(forKey:"approvalStatus") as? String) != nil ?
      CLVModels.Base.ApprovalStatus(rawValue: (aDecoder.decodeObject(forKey:"approvalStatus") as! String)) : nil
        acceptedAgreement = aDecoder.decodeObject(forKey:"acceptedAgreement") as? Bool
        prName = aDecoder.decodeObject(forKey:"prName") as? String
        prEmail = aDecoder.decodeObject(forKey:"prEmail") as? String
        prPhone = aDecoder.decodeObject(forKey:"prPhone") as? String
        website = aDecoder.decodeObject(forKey:"website") as? String
        modifiedTime = aDecoder.decodeObject(forKey:"modifiedTime") as? Date
        owner = aDecoder.decodeObject(forKey:"owner") as? CLVModels.Account.Account
        appBillingSystem = aDecoder.decodeObject(forKey:"appBillingSystem") as? String
        infoleaseVendorCode = aDecoder.decodeObject(forKey:"infoleaseVendorCode") as? String
        infoleaseGlCode = aDecoder.decodeObject(forKey:"infoleaseGlCode") as? String
        signorName = aDecoder.decodeObject(forKey:"signorName") as? String
        signorTitle = aDecoder.decodeObject(forKey:"signorTitle") as? String
        referralSubmissionTime = aDecoder.decodeObject(forKey:"referralSubmissionTime") as? Date
        emergencyEmail = aDecoder.decodeObject(forKey:"emergencyEmail") as? String
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        firstName <- map["firstName"]
        lastName <- map["lastName"]
        email <- map["email"]
        phone <- map["phone"]
        dob <- map["dob"]
        ssn <- map["ssn"]
        address <- map["address"]
        city <- map["city"]
        county <- map["county"]
        state <- map["state"]
        country <- map["country"]
        postalCode <- map["postalCode"]
        bankAccountNumber <- map["bankAccountNumber"]
        bankRoutingNumber <- map["bankRoutingNumber"]
        businessLegalName <- map["businessLegalName"]
        tin <- map["tin"]
        vatRegisterNumber <- map["vatRegisterNumber"]
        sensitiveData <- map["sensitiveData"]
        businessAddress <- map["businessAddress"]
        businessCity <- map["businessCity"]
        businessState <- map["businessState"]
        businessCountry <- map["businessCountry"]
        businessPostalCode <- map["businessPostalCode"]
        billingStatus <- map["billingStatus"]
        billingStatusMessage <- map["billingStatusMessage"]
        approvalStatus <- map["approvalStatus"]
        acceptedAgreement <- map["acceptedAgreement"]
        prName <- map["prName"]
        prEmail <- map["prEmail"]
        prPhone <- map["prPhone"]
        website <- map["website"]
        modifiedTime <- (map["modifiedTime"], CLVDateTransform())
        owner <- map["owner"]
        appBillingSystem <- map["appBillingSystem"]
        infoleaseVendorCode <- map["infoleaseVendorCode"]
        infoleaseGlCode <- map["infoleaseGlCode"]
        signorName <- map["signorName"]
        signorTitle <- map["signorTitle"]
        referralSubmissionTime <- (map["referralSubmissionTime"], CLVDateTransform())
        emergencyEmail <- map["emergencyEmail"]
  }
}

 
public enum DeveloperBillingStatus: String {
  case PENDING
  case APPROVED
  case DECLINED
  case ERROR
}

 
open class DeveloperMerchantLimits: NSObject, NSCoding, Mappable {
    /// Total limit for developers.
    open var requestLimit: Int?
    /// Limit for each merchantApp.
    open var merchantRequestLimit: Int?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(requestLimit, forKey: "requestLimit")
  aCoder.encode(merchantRequestLimit, forKey: "merchantRequestLimit")
}

required public init(coder aDecoder: NSCoder) {
      requestLimit = aDecoder.decodeObject(forKey:"requestLimit") as? Int
        merchantRequestLimit = aDecoder.decodeObject(forKey:"merchantRequestLimit") as? Int
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      requestLimit <- map["requestLimit"]
        merchantRequestLimit <- map["merchantRequestLimit"]
  }
}

 
open class DeveloperPermission: NSObject, NSCoding, Mappable {
    open var id: String?
    open var name: String?
    open var label: String?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(label, forKey: "label")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        label = aDecoder.decodeObject(forKey:"label") as? String
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        label <- map["label"]
  }
}

 
open class DeveloperRole: NSObject, NSCoding, Mappable {
    open var id: String?
    open var name: String?
    open var label: String?
    open var system: Bool?
    open var templateRole: CLVModels.Developer.DeveloperRole?
    open var accounts: [CLVModels.Account.Account]?
    open var permissions: [CLVModels.Employees.Permissions]?
    open var developerRef: CLVModels.Developer.Developer?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(label, forKey: "label")
  aCoder.encode(system, forKey: "system")
  aCoder.encode(templateRole, forKey: "templateRole")
  aCoder.encode(accounts, forKey: "accounts")
  aCoder.encode(permissions, forKey: "permissions")
  aCoder.encode(developerRef, forKey: "developerRef")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        label = aDecoder.decodeObject(forKey:"label") as? String
        system = aDecoder.decodeObject(forKey:"system") as? Bool
        templateRole = aDecoder.decodeObject(forKey:"templateRole") as? CLVModels.Developer.DeveloperRole
        accounts = aDecoder.decodeObject(forKey:"accounts") as? [CLVModels.Account.Account]
        permissions = aDecoder.decodeObject(forKey:"permissions") as? [CLVModels.Employees.Permissions]
        developerRef = aDecoder.decodeObject(forKey:"developerRef") as? CLVModels.Developer.Developer
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        label <- map["label"]
        system <- map["system"]
        templateRole <- map["templateRole"]
        accounts <- map["accounts.elements"]
        permissions <- map["permissions.elements"]
        developerRef <- map["developerRef"]
  }
}

 
/// A batch of merchants
open class MerchantBatch: NSObject, NSCoding, Mappable {
    /// The merchants that belong to this batch
    open var merchants: [CLVModels.Base.Reference]?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(merchants, forKey: "merchants")
}

required public init(coder aDecoder: NSCoder) {
      merchants = aDecoder.decodeObject(forKey:"merchants") as? [CLVModels.Base.Reference]
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      merchants <- map["merchants.elements"]
  }
}

 
open class MerchantGroup: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    /// Group name.
    open var name: String?
    /// The developer that created this merchant group.
    open var developer_: CLVModels.Developer.Developer?
    /// The rollout that created this merchant group if it the result of a scheduled rollout. Developers can schedule rollouts for future dates by creating Rollout resources. When the rollout time is reached, a merchant group is created.
    open var rollout: CLVModels.Base.Reference?
    /// Timestamp indicating when the group was created.
    open var createdTime: Date?
    /// The merchants directly added to the group (static merchants).
    open var merchants: [CLVModels.Merchant.Merchant]?
    /// The number of merchants that belong to this group.
    open var merchantCount: Int?
    /// The app android versions that belong to this merchant group
    open var androidVersions: [CLVModels.Apps.AndroidVersion]?
    /// The application versions configured for this merchant group.
    open var appVersions: [CLVModels.Developer.MerchantGroupAppVersion]?
    /// The ROM versions that belong to this merchant group
    open var roms: [CLVModels.Device.Rom]?
    /// The exclusions that belong to the merchant group
    open var exclusions: [CLVModels.Exclusions.SoftwareUpdateExclusion]?
    /// The filter query parameters used to join merchants to this group.
    open var merchantFilter: String?
    /// The merchants in the group joined by the filter.
    open var filterMerchants: [CLVModels.Merchant.Merchant]?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(developer_, forKey: "developer_")
  aCoder.encode(rollout, forKey: "rollout")
  aCoder.encode(createdTime, forKey: "createdTime")
  aCoder.encode(merchants, forKey: "merchants")
  aCoder.encode(merchantCount, forKey: "merchantCount")
  aCoder.encode(androidVersions, forKey: "androidVersions")
  aCoder.encode(appVersions, forKey: "appVersions")
  aCoder.encode(roms, forKey: "roms")
  aCoder.encode(exclusions, forKey: "exclusions")
  aCoder.encode(merchantFilter, forKey: "merchantFilter")
  aCoder.encode(filterMerchants, forKey: "filterMerchants")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        developer_ = aDecoder.decodeObject(forKey:"developer_") as? CLVModels.Developer.Developer
        rollout = aDecoder.decodeObject(forKey:"rollout") as? CLVModels.Base.Reference
        createdTime = aDecoder.decodeObject(forKey:"createdTime") as? Date
        merchants = aDecoder.decodeObject(forKey:"merchants") as? [CLVModels.Merchant.Merchant]
        merchantCount = aDecoder.decodeObject(forKey:"merchantCount") as? Int
        androidVersions = aDecoder.decodeObject(forKey:"androidVersions") as? [CLVModels.Apps.AndroidVersion]
        appVersions = aDecoder.decodeObject(forKey:"appVersions") as? [CLVModels.Developer.MerchantGroupAppVersion]
        roms = aDecoder.decodeObject(forKey:"roms") as? [CLVModels.Device.Rom]
        exclusions = aDecoder.decodeObject(forKey:"exclusions") as? [CLVModels.Exclusions.SoftwareUpdateExclusion]
        merchantFilter = aDecoder.decodeObject(forKey:"merchantFilter") as? String
        filterMerchants = aDecoder.decodeObject(forKey:"filterMerchants") as? [CLVModels.Merchant.Merchant]
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        developer_ <- map["developer"]
        rollout <- map["rollout"]
        createdTime <- (map["createdTime"], CLVDateTransform())
        merchants <- map["merchants.elements"]
        merchantCount <- map["merchantCount"]
        androidVersions <- map["androidVersions.elements"]
        appVersions <- map["appVersions.elements"]
        roms <- map["roms.elements"]
        exclusions <- map["exclusions.elements"]
        merchantFilter <- map["merchantFilter"]
        filterMerchants <- map["filterMerchants.elements"]
  }
}

 
/// Declares the target version of a given application for a given merchant group, optionally constrained by device type.
open class MerchantGroupAppVersion: NSObject, NSCoding, Mappable {
    /// Unique identifier.
    open var id: String?
    /// Identifies the merchant group of interest.
    open var merchantGroup: CLVModels.Developer.MerchantGroup?
    /// Identifies the application of interest.
    open var app: CLVModels.Apps.App?
    /// The targeted app version.
    open var version_: CLVModels.Apps.AndroidVersion?
    /// The targeted device type, if any.
    open var deviceType: CLVModels.Apps.DeviceType?
    /// The time this android version was associated to this merchant group.
    open var associationTime: Date?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(merchantGroup, forKey: "merchantGroup")
  aCoder.encode(app, forKey: "app")
  aCoder.encode(version_, forKey: "version_")
  aCoder.encode(deviceType, forKey: "deviceType")
  aCoder.encode(associationTime, forKey: "associationTime")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        merchantGroup = aDecoder.decodeObject(forKey:"merchantGroup") as? CLVModels.Developer.MerchantGroup
        app = aDecoder.decodeObject(forKey:"app") as? CLVModels.Apps.App
        version_ = aDecoder.decodeObject(forKey:"version_") as? CLVModels.Apps.AndroidVersion
        deviceType = aDecoder.decodeObject(forKey:"deviceType") as? CLVModels.Apps.DeviceType
        associationTime = aDecoder.decodeObject(forKey:"associationTime") as? Date
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        merchantGroup <- map["merchantGroup"]
        app <- map["app"]
        version_ <- map["version"]
        deviceType <- map["deviceType"]
        associationTime <- (map["associationTime"], CLVDateTransform())
  }
}

 
/// Various parameters that specify the creation of a merchant group without explicitly having to associate individual merchants.
open class MerchantGroupConfig: NSObject, NSCoding, Mappable {
    /// If the numberIsFixed field is true, then this represents the number of merchants to include in the merchant group. If the numberIsFixed field is false, then this represents the percentage of merchants (that match the remaining criteria specified by these parameters) to add to the group.
    open var numberOfMerchants: Int?
    open var excludedMerchantGroups: [CLVModels.Base.Reference]?
    /// Whether the numberOfMerchants field represents a count or a percentage. See documentation for numberOfMerchants.
    open var numberIsFixed: Bool?
    /// Whether to restrict the merchants in this group to billable merchants only.
    open var billable: Bool?
    /// The optional UUID of a Clover app. If it is supplied, then only merchants that have installed that app will be added to the merchant group.
    open var app: String?
    /// The optional UUID of an APK (i.e., Android version). If it is supplied, then only merchants that have that version of the app will be added to the merchant group.
    open var version_: String?
    /// Whether to require merchants in this group to have a Clover Station.
    open var stationRequired: Bool?
    /// Whether to require merchants in this group to have a Clover Mobile.
    open var mobileRequired: Bool?
    /// Whether to require merchants in this group to have a Clover Mini.
    open var miniRequired: Bool?
    open var androidVersions: [CLVModels.Base.Reference]?
    open var roms: [CLVModels.Base.Reference]?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(numberOfMerchants, forKey: "numberOfMerchants")
  aCoder.encode(excludedMerchantGroups, forKey: "excludedMerchantGroups")
  aCoder.encode(numberIsFixed, forKey: "numberIsFixed")
  aCoder.encode(billable, forKey: "billable")
  aCoder.encode(app, forKey: "app")
  aCoder.encode(version_, forKey: "version_")
  aCoder.encode(stationRequired, forKey: "stationRequired")
  aCoder.encode(mobileRequired, forKey: "mobileRequired")
  aCoder.encode(miniRequired, forKey: "miniRequired")
  aCoder.encode(androidVersions, forKey: "androidVersions")
  aCoder.encode(roms, forKey: "roms")
}

required public init(coder aDecoder: NSCoder) {
      numberOfMerchants = aDecoder.decodeObject(forKey:"numberOfMerchants") as? Int
        excludedMerchantGroups = aDecoder.decodeObject(forKey:"excludedMerchantGroups") as? [CLVModels.Base.Reference]
        numberIsFixed = aDecoder.decodeObject(forKey:"numberIsFixed") as? Bool
        billable = aDecoder.decodeObject(forKey:"billable") as? Bool
        app = aDecoder.decodeObject(forKey:"app") as? String
        version_ = aDecoder.decodeObject(forKey:"version_") as? String
        stationRequired = aDecoder.decodeObject(forKey:"stationRequired") as? Bool
        mobileRequired = aDecoder.decodeObject(forKey:"mobileRequired") as? Bool
        miniRequired = aDecoder.decodeObject(forKey:"miniRequired") as? Bool
        androidVersions = aDecoder.decodeObject(forKey:"androidVersions") as? [CLVModels.Base.Reference]
        roms = aDecoder.decodeObject(forKey:"roms") as? [CLVModels.Base.Reference]
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      numberOfMerchants <- map["numberOfMerchants"]
        excludedMerchantGroups <- map["excludedMerchantGroups.elements"]
        numberIsFixed <- map["numberIsFixed"]
        billable <- map["billable"]
        app <- map["app"]
        version_ <- map["version"]
        stationRequired <- map["stationRequired"]
        mobileRequired <- map["mobileRequired"]
        miniRequired <- map["miniRequired"]
        androidVersions <- map["androidVersions.elements"]
        roms <- map["roms.elements"]
  }
}

 
/// A report containing information about a particular merchant group configuration
open class ReportMerchantGroupConfig: NSObject, NSCoding, Mappable {
    /// The total number of merchants that satisfy the merchant group configuration criteria. See the MerchantGroupConfig class.
    open var totalMerchantCount: Int?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(totalMerchantCount, forKey: "totalMerchantCount")
}

required public init(coder aDecoder: NSCoder) {
      totalMerchantCount = aDecoder.decodeObject(forKey:"totalMerchantCount") as? Int
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      totalMerchantCount <- map["totalMerchantCount"]
  }
}

 
/// A Rollout defines specifications for creating a merchant group at a scheduled time
open class Rollout: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    open var name: String?
    open var config: String?
    open var publish: Bool?
    open var status: String?
    /// The number of merchants associated with this rollout
    open var merchantCount: Int?
    open var rolloutTime: Date?
    open var createdTime: Date?
    open var modifiedTime: Date?
    open var developerRef: CLVModels.Base.Reference?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(config, forKey: "config")
  aCoder.encode(publish, forKey: "publish")
  aCoder.encode(status, forKey: "status")
  aCoder.encode(merchantCount, forKey: "merchantCount")
  aCoder.encode(rolloutTime, forKey: "rolloutTime")
  aCoder.encode(createdTime, forKey: "createdTime")
  aCoder.encode(modifiedTime, forKey: "modifiedTime")
  aCoder.encode(developerRef, forKey: "developerRef")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        config = aDecoder.decodeObject(forKey:"config") as? String
        publish = aDecoder.decodeObject(forKey:"publish") as? Bool
        status = aDecoder.decodeObject(forKey:"status") as? String
        merchantCount = aDecoder.decodeObject(forKey:"merchantCount") as? Int
        rolloutTime = aDecoder.decodeObject(forKey:"rolloutTime") as? Date
        createdTime = aDecoder.decodeObject(forKey:"createdTime") as? Date
        modifiedTime = aDecoder.decodeObject(forKey:"modifiedTime") as? Date
        developerRef = aDecoder.decodeObject(forKey:"developerRef") as? CLVModels.Base.Reference
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        config <- map["config"]
        publish <- map["publish"]
        status <- map["status"]
        merchantCount <- map["merchantCount"]
        rolloutTime <- (map["rolloutTime"], CLVDateTransform())
        createdTime <- (map["createdTime"], CLVDateTransform())
        modifiedTime <- (map["modifiedTime"], CLVDateTransform())
        developerRef <- map["developerRef"]
  }
}

 
/// A Merchant associated with a Rollout
open class RolloutMerchant: NSObject, NSCoding, Mappable {
    /// The merchant's name
    open var name: String?
    /// The rollout that the merchant is associated with
    open var rollout: CLVModels.Base.Reference?
    /// The merchant that is associated with the rollout
    open var merchant: CLVModels.Base.Reference?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(name, forKey: "name")
  aCoder.encode(rollout, forKey: "rollout")
  aCoder.encode(merchant, forKey: "merchant")
}

required public init(coder aDecoder: NSCoder) {
      name = aDecoder.decodeObject(forKey:"name") as? String
        rollout = aDecoder.decodeObject(forKey:"rollout") as? CLVModels.Base.Reference
        merchant = aDecoder.decodeObject(forKey:"merchant") as? CLVModels.Base.Reference
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      name <- map["name"]
        rollout <- map["rollout"]
        merchant <- map["merchant"]
  }
}

 
/// Metadata for a logical set of scheduled rollouts
open class RolloutSchedule: NSObject, NSCoding, Mappable {
    /// Unique identifier
    open var id: String?
    open var name: String?
    open var statusCounts: [String:Int]?
    open var rolloutCount: Int?
    open var startTime: Date?
    open var endTime: Date?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(id, forKey: "id")
  aCoder.encode(name, forKey: "name")
  aCoder.encode(statusCounts, forKey: "statusCounts")
  aCoder.encode(rolloutCount, forKey: "rolloutCount")
  aCoder.encode(startTime, forKey: "startTime")
  aCoder.encode(endTime, forKey: "endTime")
}

required public init(coder aDecoder: NSCoder) {
      id = aDecoder.decodeObject(forKey:"id") as? String
        name = aDecoder.decodeObject(forKey:"name") as? String
        statusCounts = aDecoder.decodeObject(forKey:"statusCounts") as? [String:Int]
        rolloutCount = aDecoder.decodeObject(forKey:"rolloutCount") as? Int
        startTime = aDecoder.decodeObject(forKey:"startTime") as? Date
        endTime = aDecoder.decodeObject(forKey:"endTime") as? Date
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      id <- map["id"]
        name <- map["name"]
        statusCounts <- map["statusCounts"]
        rolloutCount <- map["rolloutCount"]
        startTime <- (map["startTime"], CLVDateTransform())
        endTime <- (map["endTime"], CLVDateTransform())
  }
}

 
public enum RolloutStatus: String {
  case SCHEDULED
  case IN_PROGRESS
  case FAILED
  case DONE
}

 
/// A collection of APK and ROM versions that can be delivered to a merchant as a single package
open class SoftwarePackage: NSObject, NSCoding, Mappable {
    open var androidVersions: [CLVModels.Base.Reference]?
    open var roms: [CLVModels.Base.Reference]?

open func encode(with aCoder: NSCoder) {
  aCoder.encode(androidVersions, forKey: "androidVersions")
  aCoder.encode(roms, forKey: "roms")
}

required public init(coder aDecoder: NSCoder) {
      androidVersions = aDecoder.decodeObject(forKey:"androidVersions") as? [CLVModels.Base.Reference]
        roms = aDecoder.decodeObject(forKey:"roms") as? [CLVModels.Base.Reference]
  }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
      androidVersions <- map["androidVersions.elements"]
        roms <- map["roms.elements"]
  }
}

}

}