/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
 
import ObjectMapper

extension CLVModels {

public class Hours {
 
open class HourRange: NSObject, NSCoding, Mappable {
  
  open var start: Int?
      
  open var end: Int?
    
open func encode(with aCoder: NSCoder) {
    aCoder.encode(start, forKey: "start")
      aCoder.encode(end, forKey: "end")
  }

required public init(coder aDecoder: NSCoder) {
        start = aDecoder.decodeObject(forKey:"start") as? Int
              end = aDecoder.decodeObject(forKey:"end") as? Int
      }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
        start <- map["start"]
              end <- map["end"]
      }
}

 
open class HoursSet: NSObject, NSCoding, Mappable {
  
    /// Unique identifier
  open var id: String?
      
    /// Friendly name to describe the hours
  open var name: String?
      
  open var reference: CLVModels.Hours.Reference?
      
  open var sunday: [CLVModels.Hours.HourRange]?
      
  open var monday: [CLVModels.Hours.HourRange]?
      
  open var tuesday: [CLVModels.Hours.HourRange]?
      
  open var wednesday: [CLVModels.Hours.HourRange]?
      
  open var thursday: [CLVModels.Hours.HourRange]?
      
  open var friday: [CLVModels.Hours.HourRange]?
      
  open var saturday: [CLVModels.Hours.HourRange]?
    
open func encode(with aCoder: NSCoder) {
    aCoder.encode(id, forKey: "id")
      aCoder.encode(name, forKey: "name")
      aCoder.encode(reference, forKey: "reference")
      aCoder.encode(sunday, forKey: "sunday")
      aCoder.encode(monday, forKey: "monday")
      aCoder.encode(tuesday, forKey: "tuesday")
      aCoder.encode(wednesday, forKey: "wednesday")
      aCoder.encode(thursday, forKey: "thursday")
      aCoder.encode(friday, forKey: "friday")
      aCoder.encode(saturday, forKey: "saturday")
  }

required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey:"id") as? String
              name = aDecoder.decodeObject(forKey:"name") as? String
              reference = aDecoder.decodeObject(forKey:"reference") as? CLVModels.Hours.Reference
              sunday = aDecoder.decodeObject(forKey:"sunday") as? [CLVModels.Hours.HourRange]
              monday = aDecoder.decodeObject(forKey:"monday") as? [CLVModels.Hours.HourRange]
              tuesday = aDecoder.decodeObject(forKey:"tuesday") as? [CLVModels.Hours.HourRange]
              wednesday = aDecoder.decodeObject(forKey:"wednesday") as? [CLVModels.Hours.HourRange]
              thursday = aDecoder.decodeObject(forKey:"thursday") as? [CLVModels.Hours.HourRange]
              friday = aDecoder.decodeObject(forKey:"friday") as? [CLVModels.Hours.HourRange]
              saturday = aDecoder.decodeObject(forKey:"saturday") as? [CLVModels.Hours.HourRange]
      }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
        id <- map["id"]
              name <- map["name"]
              reference <- map["reference"]
              sunday <- map["sunday.elements"]
              monday <- map["monday.elements"]
              tuesday <- map["tuesday.elements"]
              wednesday <- map["wednesday.elements"]
              thursday <- map["thursday.elements"]
              friday <- map["friday.elements"]
              saturday <- map["saturday.elements"]
      }
}

 
open class Reference: NSObject, NSCoding, Mappable {
  
    /// ID of the reference that uses this set of hours
  open var id: String?
      
    /// External type that these hours reference
  open var type_: CLVModels.Hours.ReferenceType?
    
open func encode(with aCoder: NSCoder) {
    aCoder.encode(id, forKey: "id")
      aCoder.encode(type_?.rawValue, forKey: "type_")
  }

required public init(coder aDecoder: NSCoder) {
        id = aDecoder.decodeObject(forKey:"id") as? String
              type_ = (aDecoder.decodeObject(forKey:"type_") as? String) != nil ?
      CLVModels.Hours.ReferenceType(rawValue: (aDecoder.decodeObject(forKey:"type_") as! String)) : nil
      }

override public init() {}

// Mappable

required public init?(map: Map) {}

public func mapping(map: Map) {
        id <- map["id"]
              type_ <- map["type"]
      }
}

 
public enum ReferenceType: String {
  case ORDER_TYPE
  case ITEM_GROUP
  case SOFTWARE_UPDATE_EXCLUSION
}

}

}